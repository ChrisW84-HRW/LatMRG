/**
 * 
 * \mainpage
 * 
 * \section overview Overview
 *
 * This is the user guide and API documentation of
 * [LatMRG](https://github.com/savamarc/LatMRG) a collection of executables and
 * a library intended to study the lattice structure of congruential recursive
 * random number generators. LatMRG is free and open source software distributed
 * with the Apache License 2.0 available on [Github](https://github.com/savamarc/LatMRG)
 *
 * \subsection latmrg_guide_out Content Outline
 *
 * This page summarizes the contents and the possible uses of LatMRG. The rest
 * of this guide covers the following:
 * - \ref lattice_back and \ref background contain the theoretical knowledge
 *   needed to understand the basics of LatMRG.
 * - \ref usage presents the executable programs and their usage. It also
 *   also contains compilation instruction for LatMRG.
 * - \ref dev presents segments of code highlighting some functionnalities of
 *   LatMRG
 * - The full API documentation is also available in the **Namespace** and 
 *  **Classes** tabs.
 * - [**Getting back to Github**](https://github.com/savamarc/LatMRG)
 *
 * The API documentation is automatically generated by Doxygen.
 *
 * \subsection presentation Presentation of LatMRG
 * 
 * LatMRG is a C++ software toolkit for examining theoretical properties of
 * linear congruential or multiple recursive random number generators. Generators
 * of this kind generate a sequence of numbers
 * \f$\{x_n \in \mathbb{Z}\ | \ 0 \leq x_n < m\}\f$ with recurrence of the kind
 * (or equivalent to)
 * \f[
 *   x_n = a_1 x_{n-1} + \cdots + a_k x_{n-k} \pmod m
 * \f]
 * The values outputed by these generators are then transformed as
 * \f$u_n = x_n/m\f$ to give another
 * number sequence \f$\{u_n\} \subset [0,1)\f$. This sequence can then be used
 * as a random stream of \f$\mathcal{U}[0,1)\f$ independent identically distributed
 * random variables. This sequence is **NOT** random but it appears so with a
 * good choice of \f$m\in \mathbb{Z}_{>0}\f$, \f$k>0\f$ and
 * \f$a = (a_1, \ldots, a_k) \in \mathbb{Z}_k\f$, this is what
 * is called a **pseudo-random number sequence**.
 *
 * Given a set of indices \f$I = \{i_1, \ldots, i_t\}\f$ it is possible to use
 * the sequence of \f$u_n\f$ to generate pseudo-random vectors of the form
 * \f$v = (u_{c + i_1}, \ldots, u_{c + i_t})\f$. Define
 * \f$\Psi_I = \{(u_{i_1}, \ldots, u_{i_t}) \ | \ 0 \leq x_1, \ldots, x_k < m\}\f$.
 * This set covers vectors \f$v\f$ for all possible values of \f$c\f$. This is
 * the set of all vectors the generator can produce with indices spacing as
 * in \f$I\f$. The set
 * \f[
 *   L_t = \{k v + l w \ | \ k,l \in \mathbb{Z},\ v,w \in \Psi_I\}
 * \f]
 * is then a lattice spanned by the vectors produced by the generator. This structure
 * is well know and can be studied extensively. This guide does not cover the
 * theory behind lattices as it would be redundant with what is described in
 * [LatticeTester](http://umontreal-simul.github.io/latticetester/) which we
 * is also written by us.
 *
 * LatMRG got its name from *lattice* and *MRG* and, as its name hints, it is
 * mainly intended as a tool to study the lattice of MRG and MRG-like random
 * number generators.
 * Studying this lattice can provide usefull information about the generator.
 * - It can help assess that the points it outputs are as uniform as possible
 * - It can determine if the points are correlated on only a few hyperplans
 *
 * But LatMRG can do a few more things:
 * - Study the period of MRG-like generators
 * - Finding parameters with a good lattice structure for such generators.
 *   This has to be done in two steps:
 *   - Finding a combination of \f$m\f$ and \f$k\f$
 *   - Finding a vector \f$a\f$ that has a good lattice for such \f$m\f$ and
 *     \f$k\f$
 * - Test the lattice structure of a generator for a large quantity of \f$I\f$
 *   and build comparable mesures based on them
 * 
 * As a library, LatMRG can also be extended to easily test the lattice
 * structure and search for MRG-like generators given specific constraints on its
 * implementation.
 * 
 * */

/**
 * \page usage Compilation and Executables Usage
 *
 * \section usage_exec LatMRG executable
 *
 * As of the latest update, LatMRG possesses a single executable taking all it's
 * options from configuration files.
 * This executable has 4 different execution modes that simply the usage of the
 * core functionnalities of LatMRG.
 * - A mode to search of \f$m\f$ and \f$k\f$ parameters for MRG generators.
 * - A mode to test if a specific MRG has full period.
 * - A mode to test MRG generators with figures of merit tests built upon the
 *   computations LatMRG can perform on lattice.
 * - A mode to search for new MRG generators, using the same kind of tests as
 *   the test mode.
 *
 * We briefly introduce what each mode can do, before presenting the program
 * usage.
 *
 * \subsection usage_exec_mk Searching m and k parameters
 *
 * This mode will search for good modulus in a certain range given a number
 * \f$k\f$. This is used when searching for new generators with full period.
 *
 * This will search for prime \f$m\f$ in \f$m < 2^e\f$ or
 * \f$ 2^e+c_1 \le m \le 2^e+c_2\f$. When doing these search, it is possible to
 * ask that \f$r = (m^k-1)/(m-1)\f$ is prime and that \f$(m-1)/2\f$.
 * It is also possible to ask the program to factor \f$m-1\f$ to a file.
 *
 * All these factorisations and restrictions on primality are useful because
 * they simplify the initialization process of the search program, as the
 * factorization of \f$r\f$ and \f$(m-1)/2\f$ is needed to check the full period
 * of a generator.
 *
 * \subsection usage_exec_period Checking for full period
 *
 * This mode takes a generator and tests if it's period length is maximal.
 * There is not much to say here except that this will need a factorization for
 * \f$r\f$ and \f$m-1\f$ which can be very long to compute. This is in fact the
 * main use case of this mode. Since this factorization can take quite some
 * time, this can be used seperatly of the generator testing to have more
 * flexibility with the executable time.
 *
 * \subsection usage_exec_lattest Testing lattice structure for MRG
 *
 * This mode takes a generator, a test, a description of how to apply this test
 * and performs the test on the generator. The generator can be of any of the
 * types of MRG described in \ref background.
 *
 * The program can perform multiple computations:
 * - The length of theshortest vector in the lattice of the generator in L1 and
 *   euclidian norm.
 * - The length of the shortest vector in the dual lattice of the generator
 * - The preceding norms normalized between 0 and 1
 *
 * But it's real strength lies in the fact that it can build the generator
 * lattice and dual lattice for any projection of the generator, and compute
 * figures of merit based on the normalized mesures on these multiple projections.
 * Computing these figures of merit is really the main reason to use this mode.
 *
 * To execute the program, it is necessary to feed it with the set of
 * of the generator that you want to test. This program takes a values for
 * \f$T\f$, \f$d\f$ and \f$T_2, \ldots, T_d\f$
 * such that the program will test all projections of the form
 * \f$\{0, \ldots, t\}\f$ with \f$k \le t < T\f$, and projections on indices
 * \f$\{i_1, \ldots, i_j: 0 \leq i_k \le T_j\}\f$ for \f$2 \le j \le d\f$.
 *
 * \subsection usage_exec_search Searching for new MRG
 *
 * This mode takes configuration of MRG generators (such and the
 * modulo, the order and ranges for the parameters) and randomly searches for
 * parameters that fit this configuration. Once a generator is found, it is
 * tested with the same methodology as in the preceding \ref usage_exec_lattest
 * mode and generators are ranked by the value they get in these tests.
 *
 * Even though a lot for flexibility is available when using this mode, it is
 * usual to compare generators with figures of merit between 0 and
 *
 * \subsection usage_exec_usage Usage of the executable
 *
 * We do not provide a precompiled binairy for the main executable. To use it
 * you must first compile it following the instructions following this section.
 * Once this is done, you will find the main `MRGLattice` executable in the `bin`
 * directory of the software repository.
 *
 * As any executable, the executable can be called from the command line as
 * ```
 *      ./MRGLattice file1 file2 ...
 * ```
 * It is necessary to specify configuration files for the program to actually do
 * stuff.
 *
 * **NEW** As of the last upgrade to LatMRG, the executable now reads it's
 * configuration from `xml` files. Since configuration files have a quite
 * extensive set of tags allowing users to specify the options, the list of
 * these tags and their usage for the different modes is specified in
 * \ref conf_file.
 *
 * \section compilation Building LatMRG
 *
 * LatMRG is available on [**Github**](https://github.com/savamarc/latmrg) and
 * can be downloaded either via `git` or as a `.zip` archive. We do not provide
 * precompiled binairies, so you have to follow these instruction to use the
 * software. Once
 * you have the repository on a local machine, it is necessary to make sure that
 * you have the correct dependencies installed:
 * - [**NTL**](https://www.shoup.net/ntl/) is needed. Follow Shoup's instructions to
 *   install the library compiled with the option `NTL_THREADS=off` in a standard path.
 *   - [**gmp**](https://gmplib.org/) is a NTL dependency. It is packaged by most
 *     major Linux distributions. You will need to also download the header files
 *     of the library (usually in a `-dev` or `-devel` named package).
 * - [**Lattice Tester**](https://github.com/umontreal-simul/latticetester) is a
 *   submodule in the git repository. The instructions bellow present how to
 *   download and compile Lattice Tester along LatMRG.
 * - [**tinyxml2**](https://github.com/leethomason/tinyxml2) A small library to
 *   parse xml documents. This should be available through the package manager
 *   of most linux distributions. The header file of the library is shipped as
 *   part of the LatMRG code.
 * - [**git**](https://git-scm.com) will greatly simplify the download process for
 *   both LatMRG and Lattice Tester.
 * - [**yafu**](https://sourceforge.net/projects/yafu/) is an external executable
 *   that is used for factorization when checking that generators have full
 *   period. It is not necessary to have it when building, but the program will
 *   halt when asked for a factorization. If you want to avoid this behavior,
 *   download and unpack this executable in the `data` directory.
 *
 * To build the program, it will also be necessary to have a recent C++ compiler
 * and Python interpreter installed. Note that we do not provide instructions
 * to build the library under Windows or macOS, and that the software is only
 * tested for the `x86_64` architecture. Also note that we currently do not use
 * automatic `makefile` generation and that you will need to manually modify the
 * makefile for any non standard path choices.
 *
 * First, download the source code via github as a `.zip` unpack it and open a
 * terminal in that directory, or use git:
 * ```
 * git clone --recursive https://github.com/savamarc/LatMRG.git
 * cd LatMRG
 * ```
 * If you downloaded the zip, you will also need to download and extract Lattice
 * Tester. In the `latticetester` directory. Once this is done, the program can
 * be compiled in only a few commands. Note that the first one is interractive.
 * ```
 * make config_latticetester
 * make
 * ```
 * Once this is done, the executables can be invoked from the local directory
 * as `./bin/Program_name data_file`.
 *
 * Note that there is no way to install the program somewhere else. If `yafu` is
 * used by the program, it might be problematic to move the binaries. This is
 * because the program uses a relative path to invoke `yafu`. We are aware of
 * these issues and they will be fixed some time in the future.
 *
 * */

 * The following modules describe precompiled programs that can be executed
 * directly by following the given instructions:
 *
 * At the high-level end, LatMRG provides programs in executable
 * form. These programs read their data in files. Their use is described in
 * more detail in \ref detailed_usage.
 * In this section, we give examples. The user can also
 * tailor his own programs using the lower-level tools offered by the
 * different modules of LatMRG. This is discussed in the next
 * chapter. \anchor REF__sec2_chap_progs
 *
 *   The program <tt>maxper</tt> checks whether a given generator has maximal
 * period (see \ref MaxPeriod). The program
 * <tt>findmk</tt> can find values of \f$m\f$ and \f$k\f$ such that \f$m\f$
 * and \f$r = (m^k-1)/(m-1)\f$ are prime numbers (see \ref FindMK).
 * The programs <tt>latLLDD</tt>, <tt>latZZDD</tt> and
 * <tt>latZZRR</tt> perform standard lattice or spectral tests for a
 * generator or a lattice (see \ref LatMain). The
 * only difference between the latter three programs is that in
 * <tt>latLLDD</tt>, the multipliers and basis components are implemented in
 * <tt>long</tt>’s and <tt>double</tt>’s, respectively; in <tt>latZZDD</tt>,
 * the multipliers and basis components are implemented as large integers
 * <tt>ZZ</tt>’s and <tt>double</tt>’s, respectively; while in
 * <tt>latZZRR</tt>, the multipliers and the basis components are implemented
 * as large integers <tt>ZZ</tt>’s and large floating-point numbers
 * <tt>RR</tt>’s, respectively.
 *
 *   More comprehensive programs perform computer searches to seek the "best"
 * generators of a given type, according to maximal period and lattice
 * structure criteria. These programs also come in three similar versions:
 * <tt>seekLLDD</tt>, <tt>seekZZDD</tt> and <tt>seekZZRR</tt>.
 *
 *   We now give a few concrete examples of data files and results.
 *
 *   # An example with the program <tt>latZZDD</tt>
 *
 *   Figure  \link REF__sec2_fish31_dat fish31.dat\endlink gives an example data
 * file for the program <tt>latZZDD</tt>. The corresponding results appear in
 * Table&nbsp; \link REF__sec2_fish31_tex fish31.tex\endlink. To call the program
 * and produce these results, type <code>latZZDD fish31</code>, assuming that
 * the data are in file <code>fish31.dat</code>. The results will be in file
 * <code>fish31.tex</code>, which produces Table&nbsp;
 * \link REF__sec2_fish31_tex fish31.tex\endlink after going through LaTeX. If
 * <tt>TEX</tt> was replaced by <tt>Terminal</tt> in the data file, the
 * results would be displayed on the screen. See the description of the
 * program <tt>latZZDD</tt> for more details on how to set up the data files.
 * Note that the first column in the data file gives the data values
 * themselves, while the column on the right contains comments describing the
 * meaning of these values. In that example, the spectral test is applied to
 * the LCG of order 1 with \f$m = 2^{31}-1 = 2147483647\f$ and \f$a =
 * 742938285\f$, suggested by Fishman and Moore \cite rFIS86a&thinsp;. The
 * last column indicates the (cumulative) cpu time. The total cpu time to
 * compute all the distances \f$d_t\f$ between hyperplanes in dimensions 2 to
 * 30 was approximately 0.37 seconds.
 *
 *   <center>
 *    <div class="LatSoft-fbox"><div class="LatSoft-parbox">
 *   <table class="LatSoft-table">
 *   <tr>
 *   <td class="l"><tt>Spectral BestLat </tt></td>
 *   <td class="l">Test and Normalizer</td>
 * </tr><tr>
 *   <td class="l"><tt>L2NORM </tt></td>
 *   <td class="l">Norm</td>
 * </tr><tr>
 *   <td class="l"><tt>false </tt></td>
 *   <td class="l">Read generator from file</td>
 * </tr><tr>
 *   <td class="l"><tt>1 </tt></td>
 *   <td class="l">\f$J\f$ (number of components)</td>
 * </tr><tr>
 *   <td class="l"><tt>MRG </tt></td>
 *   <td class="l">Generator type</td>
 * </tr><tr>
 *   <td class="l"><tt>2147483647 </tt></td>
 *   <td class="l">\f$m\f$ (modulus)</td>
 * </tr><tr>
 *   <td class="l"><tt>1 </tt></td>
 *   <td class="l">\f$k\f$ (order)</td>
 * </tr><tr>
 *   <td class="l"><tt>NoCond </tt></td>
 *   <td class="l">Conditions on \f$a\f$</td>
 * </tr><tr>
 *   <td class="l"><tt>742938285 </tt></td>
 *   <td class="l">\f$a\f$ (multiplier)</td>
 * </tr><tr>
 *   <td class="l"><tt>1 </tt></td>
 *   <td class="l">Max dimension of projections</td>
 * </tr><tr>
 *   <td class="l"><tt>2 28 </tt></td>
 *   <td class="l">MinDim MaxDim</td>
 * </tr><tr>
 *   <td class="l"><tt>true </tt></td>
 *   <td class="l">Dual lattice</td>
 * </tr><tr>
 *   <td class="l"><tt>full </tt></td>
 *   <td class="l">Lattice Type</td>
 * </tr><tr>
 *   <td class="l"><tt>1 1 </tt></td>
 *   <td class="l">Lacunary indices</td>
 * </tr><tr>
 *   <td class="l"><tt>10000000 </tt></td>
 *   <td class="l">MaxNodesBB</td>
 * </tr><tr>
 *   <td class="l"><tt>true </tt></td>
 *   <td class="l">Invert flag</td>
 * </tr><tr>
 *   <td class="l"><tt>res </tt></td>
 *   <td class="l">Output Form</td>
 * </tr>
 *   </table>
 *   </div></div> <center>Example of a data file for the program
 * <tt>latZZDD</tt>, in file <tt>fish31.dat</tt>.
 * \anchor REF__sec2_fish31_dat </center>
 *   </center>
 *
 *    <center> Results of <tt>latZZDD</tt> for file <tt>fish31.dat</tt>.
 * </center> \anchor REF__sec2_fish31_tex <div class="LatSoft-medskip"></div>
 *   <center>
 *   <table class="LatSoft-table LatSoft-has-hlines">
 *   <tr class="bt">
 *   <td class="r bl">\f$t\f$</td>
 *   <td class="l">\f$d_t\f$</td>
 *   <td class="l">\f$S_t\f$</td>
 *   <td class="c br">CPU (sec)</td>
 * </tr><tr class="bt">
 *   <td class="r bl">2</td>
 *   <td class="l">2.3156E-05 </td>
 *   <td class="l">0.86725 </td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">3</td>
 *   <td class="l">0.00080231</td>
 *   <td class="l">0.86068</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">4</td>
 *   <td class="l">0.0045279</td>
 *   <td class="l">0.8627</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">5</td>
 *   <td class="l">0.01328</td>
 *   <td class="l">0.83195</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">6</td>
 *   <td class="l">0.025863</td>
 *   <td class="l">0.83415</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">7</td>
 *   <td class="l">0.0553</td>
 *   <td class="l">0.62392</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">8</td>
 *   <td class="l">0.068199</td>
 *   <td class="l">0.70666</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">9</td>
 *   <td class="l">0.106</td>
 *   <td class="l">0.61277</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">10</td>
 *   <td class="l">0.10847</td>
 *   <td class="l">0.74947</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">11</td>
 *   <td class="l">0.16903</td>
 *   <td class="l">0.57339</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">12</td>
 *   <td class="l">0.24254</td>
 *   <td class="l">0.4527</td>
 *   <td class="c br">0</td>
 * </tr><tr>
 *   <td class="r bl">13</td>
 *   <td class="l">0.24254</td>
 *   <td class="l">0.51436</td>
 *   <td class="c br">0.01</td>
 * </tr><tr>
 *   <td class="r bl">14</td>
 *   <td class="l">0.24254</td>
 *   <td class="l">0.56322</td>
 *   <td class="c br">0.01</td>
 * </tr><tr>
 *   <td class="r bl">15</td>
 *   <td class="l">0.24254</td>
 *   <td class="l">0.60586</td>
 *   <td class="c br">0.02</td>
 * </tr><tr>
 *   <td class="r bl">16</td>
 *   <td class="l">0.24254</td>
 *   <td class="l">0.64004</td>
 *   <td class="c br">0.02</td>
 * </tr><tr>
 *   <td class="r bl">17</td>
 *   <td class="l">0.24254</td>
 *   <td class="l">0.68563</td>
 *   <td class="c br">0.02</td>
 * </tr><tr>
 *   <td class="r bl">18</td>
 *   <td class="l">0.25</td>
 *   <td class="l">0.70148</td>
 *   <td class="c br">0.03</td>
 * </tr><tr>
 *   <td class="r bl">19</td>
 *   <td class="l">0.26726</td>
 *   <td class="l">0.68601</td>
 *   <td class="c br">0.04</td>
 * </tr><tr>
 *   <td class="r bl">20</td>
 *   <td class="l">0.26726</td>
 *   <td class="l">0.70891</td>
 *   <td class="c br">0.04</td>
 * </tr><tr>
 *   <td class="r bl">21</td>
 *   <td class="l">0.26726</td>
 *   <td class="l">0.73029</td>
 *   <td class="c br">0.06</td>
 * </tr><tr>
 *   <td class="r bl">22</td>
 *   <td class="l">0.28868</td>
 *   <td class="l">0.69009</td>
 *   <td class="c br">0.09</td>
 * </tr><tr>
 *   <td class="r bl">23</td>
 *   <td class="l">0.28868</td>
 *   <td class="l">0.70131</td>
 *   <td class="c br">0.10</td>
 * </tr><tr>
 *   <td class="r bl">24</td>
 *   <td class="l">0.30151</td>
 *   <td class="l">0.67739</td>
 *   <td class="c br">0.13</td>
 * </tr><tr>
 *   <td class="r bl">25</td>
 *   <td class="l">0.30151</td>
 *   <td class="l">0.71188</td>
 *   <td class="c br">0.16</td>
 * </tr><tr>
 *   <td class="r bl">26</td>
 *   <td class="l">0.30151</td>
 *   <td class="l">0.74118</td>
 *   <td class="c br">0.19</td>
 * </tr><tr>
 *   <td class="r bl">27</td>
 *   <td class="l">0.30151</td>
 *   <td class="l">0.76362</td>
 *   <td class="c br">0.22</td>
 * </tr><tr>
 *   <td class="r bl">28</td>
 *   <td class="l">0.30151</td>
 *   <td class="l">0.78104</td>
 *   <td class="c br">0.26</td>
 * </tr>
 *   </table>
 *
 *   </center>
 *
 *   <center><div class="LatSoft-fbox"><pre>
 * Spectral   Laminated            Test \f$<\f$Normalizer\f$>\f$
 * FALSE                           Read generators from file
 * 1                               J
 *  MRG                             Gener. type
 *  32749  1 0                      Modulo m
 *  2                               Order k
 *  TRUE                            Maximal period
 *  Decomp                          Factors of m-1
 *  Write seek15r.fac               Factors of r  (File2)
 *  NoCond                          Implem. condition
 *  1                               b1
 *  180                             c1
 *  -180                            b2
 *  -1                              c2
 *  Exhaust                         Search method: exhaustive search
 * 1                               NbCat
 * 3 8                             Dim(0)  Dim(1)
 * 0.2                             Min merit values
 * 1.0                             Max merit values
 * 2                               Nb of retained generators
 * Full                            Lattice type (analyzed)
 * 1  1                            Lacunary ind: group sizes,  spacing
 * 1000000                         Max num of nodes in each BB
 * 1 m                             Time limit: 1 minute
 * 12345                           S1: seed for the random number generator
 * RES                             Output in File</pre></div></center>
 *
 *   <center> Example of a data file for the program <tt>seekLLDD</tt>, in
 * file <tt>seek15.dat</tt>. </center>
 *
 *    \anchor REF__sec2_seek15_dat
 *
 *    <center><div class="LatSoft-fbox"><pre>
 * SEARCH for good MRGs of order 2
 * -----------------------------------------
 * DATA
 * -----------------------------------------
 * Component 1
 *    Modulus m              : 32749
 *    Order k                : 2
 *    Factors of m-1         :
 *    Factors of r           :
 *
 *    Search method                      : EXHAUST
 *    Bounds : a1 from : 1
 *                  to : 180
 *             a2 from : -180
 *                  to : -1
 *    Implementation condition           : NO_COND
 *    Maximum period required            : true
 * -----------------------------------------
 *
 *    Merit criterion                    : M_8
 *    Seed for RNG                       : 12345
 *    Max nodes in branch-and-bound      : 1000000
 *    Lattice Type                       : FULL
 *
 * RESULTS
 * -----------------------------------------
 *     Values of a2 tried                    : 5873
 *
 *     Nb. of polynomials to examine         : 5873
 *     Nb. Generators conserved              : 2
 *     Total CPU time (after setup)          = 0:0:3.3
 *
 *  +----------------------------------------------------------------
 *  | 2 Generators retained for criterion M_8
 *  +----------------------------------------------------------------
 *  | M                    K               A                       Merit
 *  +---------------------------------------------------------------------
 *  | 32749                2               [ 180 -176 ]            0.21911
 *  +---------------------------------------------------------------------
 *  | 32749                2               [ 180 -175 ]            0.2185
 *  +---------------------------------------------------------------------</pre></div></center>
 *
 *   <center> Results of program <tt>seekl</tt> in file <tt>seek15.res</tt>.
 * </center>
 *
 *    \anchor REF__sec2_seek15_res
 *
 *   # Examples with the programs <tt>seekLLDD</tt> and <tt>seekZZDD</tt>
 *
 *   Figure  \link REF__sec2_seek15_dat seek15.dat\endlink gives an example of a
 * data file for <tt>seekLLDD</tt>. It will perform an exhaustive search
 * among the 32400 generators of order \f$k=2\f$ with modulus \f$m= 32749\f$,
 * \f$1\le a_1\le180\f$, and \f$-180\le a_2\le-1\f$. The criterion is
 * \f$M_8\f$. The two best generators will be retained, provided their values
 * of \f$M_8\f$ are at least 0.2. The values of \f$m-1\f$ and \f$r\f$ will be
 * decomposed by the program. The factors of \f$r\f$ will be written in file
 * <code>seek15r.fac</code>, while those of \f$m-1\f$ will not be kept. The
 * results of that program appear in Figure&nbsp; {@link REF__sec2_seek15_res
 * seek15.res} (this is an actual printout, for illustration).
 *
 *   Figure  \link REF__sec2_seek63_dat seek63.dat\endlink gives another data file
 * example, this time for <tt>seekZZDD</tt>. It asks for a random search for
 * good generators of order \f$k=5\f$ with modulus \f$m= 2^{63} - 711\f$,
 * \f$1\le a_1\le2^{63}-712\f$, \f$a_2 = a_3 = a_4 = 0\f$,
 * \f$-2^{63}+712\le a_5\le-1\f$, for which \f$a_i (m\mod a_i) < m\f$ for
 * \f$i=1,5\f$, and which have maximal period. The criterion is \f$S_{12}\f$.
 * Only the best generator will be retained. The factorization of \f$m-1\f$
 * will be read in file <code>seek63.fac</code> and \f$r\f$ is prime. For the
 * random search, we will examine 1000 subregions of dimensions
 * \f$(10\times1\times1\times1\times10)\f$, that is, a total of 100000
 * generators (10000 values of \f$a_5\f$), if time permits. We give the
 * program a cpu time-limit of 3 hours. A partial view of the results file is
 * given in Figure&nbsp; \link REF__sec2_seek63_res seek63.res\endlink.
 *
 *   Note that we are not recommending any of these particular generators.
 * These examples are only to illustrate the capabilities of LatMRG.
 *
 *    <center><div class="LatSoft-fbox"><pre>
 * Spectral   BestLat              Test \f$<\f$Normalizer\f$>\f$
 * FALSE                           Read generators from file
 * 1                               J
 *  MRG                             Gener. type
 *  2  63 -711                      Modulo m
 *  5                               Order k
 *  TRUE                            Maximal period
 *  Read  seek63.fac                Factors of m-1 in file
 *  Prime                           Factors of r
 *  AppFact                         Implem. condition
 *  1                               b_1
 *  2  63  -712                     c_1
 *  0
 *  0
 *  0
 *  0
 *  0
 *  0
 *  -2  63  -712
 *  -1
 *  Random 1000 10 10              Search method: random search
 * 1                               NbCat
 * 6  12                           Dim(0)  Dim(1)
 * 0.0                             Min merit values
 * 1.0                             Max merit values
 * 1                               Nb of retained generators
 * Full                            Lattice type (analyzed)
 * 1  1                            Lacunary ind. group sizes,  spacing
 * 1000000                         Max nb of nodes in each BB
 * 3 h                             Time limit: 3 hours
 * 12345                           S1: seed for the random number generator
 * RES                             Output in File</pre></div></center>
 *   <center> Example data file for program <tt>seekZZDD</tt>, in file
 * <tt>seek63.dat</tt>. </center>
 *
 *    \anchor REF__sec2_seek63_dat
 *
 *    <center><div class="LatSoft-fbox"><pre>
 *  SEARCH for good MRGs of order 5
 * -----------------------------------------
 * DATA
 * -----------------------------------------
 * Component 1
 *    Modulus m              : 9223372036854775097
 *    Order k                : 5
 *    Factors of m-1         :
 *    Factors of r           :
 *
 *    Search method                      : RANDOM
 *    Bounds : a1 from : 1
 *                  to : 9223372036854775096
 *             a2 from : 0
 *                  to : 0
 *             a3 from : 0
 *                  to : 0
 *             a4 from : 0
 *                  to : 0
 *             a5 from : -9223372036854775096
 *                  to : -1
 *    Implementation condition           : APP_FACT
 *    Maximum period required            : true
 * -----------------------------------------
 *
 *    Merit criterion                    : M_8
 *    Seed for RNG                       : 98765
 *    Max nodes in branch-and-bound      : 1000000
 *    Lattice Type                       : FULL
 *
 * RESULTS
 * -----------------------------------------
 *     Values of a5 tried                    : 1469
 *
 *     Nb. Generators conserved              : 1
 *     Total CPU time (after setup)          = 0:4:4.7
 *
 *  +--------------------------------------------------------------------
 *  | 1 Generators retained for criterion M_12
 *  +--------------------------------------------------------------------
 *  | M                    K      A                               Merit
 *  +--------------------------------------------------------------------
 *  | 9223372036854775097  5      [2649706710257 0 0 0 -1963898772] 0.00032238
 *  +-----------------------------------------------------------------</pre></div></center>
 *   <center> Results of program <tt>seekZZDD</tt> in file
 * <tt>seek63.res</tt>. </center>
 *
 *    \anchor REF__sec2_seek63_res
 *
 *   Example  \link REF__sec2_seek63b_dat seek63b.dat\endlink is similar to example
 * \link REF__sec2_seek63_dat seek63.dat\endlink, except that this time, the
 * multipliers must be equal by groups: the first three multipliers must all
 * be equal, and the last two are always equal. We once again do a random
 * search with 1000 regions.
 *
 *    <center><div class="LatSoft-fbox"><pre>
 * Spectral   BestLat              Test \f$<\f$Normalizer\f$>\f$
 * FALSE                           Read generators from file
 * 1                               J
 *  MRG                             Generator type
 *  2  63 -711                      Modulus m
 *  5                               Order k
 *  TRUE                            Maximal period
 *  Read  seek63.fac                Factors of m-1 in file
 *  Prime                           Factors of r
 *  Equal 2 3                       Implem. condition
 *  1                               b_1, b_2, b_3
 *  2  31  -1                       c_1, c_2, c_3
 *  -2  31  -1                      b_4, b_5
 *  -1                              c_4, c_5
 *  Random 1000 10 10              Search method: random
 * 1                               Num. Categ.
 * 6  12                           Dim_0  Dim_1
 * 0.0                             Min merit values
 * 1.0                             Max merit values
 * 1                               Num. of retained generators
 * Full                            Lattice type
 * 1  1                            Lacunary ind. group sizes,  spacing
 * 1000000                         Max nb of nodes in each BB
 * 3 h                             Time limit: 3 hours
 * 12345                           S1: seed for the random number generator
 * RES                             Output in File</pre></div></center>
 *   <center> Example data file for program <tt>seekZZDD</tt>, in file
 * <tt>seek63b.dat</tt>. </center>
 *
 *    \anchor REF__sec2_seek63b_dat
 *
 *    <center><div class="LatSoft-fbox"><pre>
 *  SEARCH for good MRGs of order 5
 * -----------------------------------------
 * DATA
 * -----------------------------------------
 * Component 1
 *    Modulus m              : 9223372036854775097
 *    Order k                : 5
 *    Factors of m-1         :
 *    Factors of r           :
 *
 *    Search method                      : RANDOM
 *    Bounds : a1 from : 1
 *                  to : 2147483647
 *             a2 from : 1
 *                  to : 2147483647
 *             a3 from : 1
 *                  to : 2147483647
 *             a4 from : -2147483647
 *                  to : -1
 *             a5 from : -2147483647
 *                  to : -1
 *    Implementation condition           : EQUAL_COEF
 *    Maximum period required            : true
 * -----------------------------------------
 *
 *    Merit criterion                    : M_8
 *    Seed for RNG                       : 12345
 *    Max nodes in branch-and-bound      : 1000000
 *    Lattice Type                       : FULL
 *
 * RESULTS
 * -----------------------------------------
 *     Values of a5 tried                    : 8955
 *
 *     Nb. of polynomials to examine         : 8955
 *     Nb. Generators conserved              : 1
 *     Total CPU time (after setup)          = 0:5:19.7
 *   -----------------------------------------------------------------------
 *  +--------------------------------------------------------------------
 *  | 1 Generators retained for criterion M_12
 *  +--------------------------------------------------------------------
 *  | M                    K        A                               Merit
 *  +--------------------------------------------------------------------
 *  | 9223372036854775097  5      [2102602298 2102602298 2102602298 -2112400139 -2112400139]          5.7309e-07
 *  +-----------------------------------------------------------------</pre></div></center>
 *   <center> Results of program <tt>seekZZDD</tt> in file
 * <tt>seek63b.res</tt>. </center>
 *
 *    \anchor REF__sec2_seek63b_res
 *

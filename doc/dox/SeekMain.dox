/**
 * \page SeekMain SeekMain
 * \section seek SeekMain
 * 
 * This is the main program to search for the "best" (or "worst") multiple
 * recursive generators of a given form,
 * based on a criteria based on the Beyer quotient or on the spectral test.
 * It produces a report listing the retained generators, their properties, and 
 * various statistics on the search.
 *
 * One can search for combined MRGs with \f$J\f$ components, or simple MRGs
 * \f$(J=1)\f$. For a single MRG (or for each component, in case
 * \f$J > 1\f$), with given modulus \f$m\f$ and order \f$k\f$, the program
 * searches for vectors of multipliers inside the region bounded by the
 * vectors \f$b = (b_1,…,b_k)\f$ and \f$c = (c_1,…,c_k)\f$ such that \f$-m <
 * b_i\le c_i < m\f$ for each \f$i\f$. The search can be exhaustive in that
 * region, or random. One can search only among maximal period generators
 * (for each component), or not consider the period and examine only the
 * lattice structure. The former (checking maximal period conditions) can be
 * done only if \f$m\f$ is prime, or if \f$k=1\f$ and \f$m\f$ is a power of a
 * prime. The program can also list the retained generators in a file, in a
 * format more compact than the standard one that can be re-used as
 * input to the program, in a later run. This could be useful, for example,
 * if one wishes to perform first a screening over a large region, based on a
 * criterion that does not require expensive computations, and then do a
 * second pass over the retained generators, based on a more stringent
 * criterion, such as looking at the lattice structure in higher dimensions,
 * and/or verifying the results by performing all computations using error
 * bounds.
 *
 * \subsection method_seek Searching method
 *
 * For an exhaustive search for MRGs, all vectors of multipliers of the form
 * \f$a = (a_1,…,a_k)\f$ such that \f$b_i\le a_i\le c_i\f$ for \f$i=1,…,k\f$
 * will be examined, for a total of \f$N_v = \prod_{i=1}^k (c_i-b_i+1)\f$
 * vectors. This holds for each component. Therefore, if there are \f$J\f$
 * components and \f$N_{v,j}\f$ vectors are examined for component \f$j\f$,
 * then a total of \f$\prod_{j=1}^J N_{v,j}\f$ generators are examined.
 *
 * For a random search for MRGs, we fix a number of subregions (clusters) we
 * want to examine, and the size \f$h_i\f$ of each subregion in dimension
 * \f$i\f$, for \f$i=1,…,k\f$. The program will examine a total of
 * \f$n\prod_{i=1}^k h_i\f$ vectors of multipliers (for each MRG component)
 * by repeating \f$n\f$ times the following: For \f$i=1,…,k\f$, generate
 * \f$\alpha_i\f$ randomly, uniformly over the set
 * \f$\{b_i,…,c_i-h_i+1\}\f$; then, examine all the vectors \f$a =
 * (a_1,…,a_k)\f$ such that \f$\alpha_i\le a_i\le\alpha_i+h_i-1\f$ for
 * each \f$i\f$.
 *
 * When examining a vector \f$a\f$, the program first checks if the maximal
 * period conditions are satisfied, if this is required. For prime modulus
 * \f$m\f$, the condition
 * \f[((-1)^{k+1} a_k)^{(m-1)/q}\ \mathrm{mod} \ m \neq 1,\ \forall q | m-1\f]
 * is verified only once for each distinct value of \f$a_k\f$ (which
 * corresponds to \f$\prod_{i=1}^{k-1} h_i\f$ different values). To verify
 * the maximal period conditions, the factorizations of \f$m-1\f$ and \f$r =
 * (m^k-1)/(m-1)\f$ are required. They can be found by the program, if
 * desired, or provided by the user in a file (see below). All factorizations
 * depend on the inclusion of the `yafu` executable in the right path. More
 * information is provided about that in the installation instructions.
 * Factoring \f$r\f$ can take *huge* amounts of time. To avoid redoing the
 * factorization, it is possible to print the factorization results in a file.
 * The factorizations of \f$m-1\f$ et \f$r\f$ are necessary only when \f$m\f$ is
 * prime and maximal period is required.
 *
 * If \f$a\f$ is not rejected by the maximal period test, then we move
 * forward to the next MRG component and try all the vectors for that next
 * component (by exhaustive or random search) and examine their combination
 * with the currently examined multipliers for the previous components. For
 * each combined generator, the values of \f$d_t\f$ or \f$q_t\f$ are computed
 * for dimensions \f$k+1,…,T\f$.
 *
 * The program always keeps lower and upper bounds on the figure of merit
 * (\f$M_T\f$ or \f$Q_T\f$), in each dimension, for the generator to be worth
 * considering. The initial values of these bounds are given by the user in
 * the fields *MinMerit* and *MaxMerit*. The lower bound can be 0.0 and the
 * upper bound can be 1.0, which means that there is no effective bounds for
 * some categories if desired.
 *
 * As soon as a generator has a figure of merit below the lower bound in a
 * given dimension, or above the upper bound for its category (after the
 * computations for all the dimensions in this category have been completed),
 * then this generator is immediately discarded and no further computations
 * are made for it. This can save enormous amounts of time in the case of
 * very large searches up to high dimensions, because with good bounds, few
 * generators will reach the large dimensions.
 *
 * During execution, only the bounds for the last category can be modified.
 * If the figure of merit for the last category is to be *maximized*, when we
 * have found enough [i.e., *NbGen*(\f$C\f$)] generators with a figure of
 * merit \f$\ge\sigma\f$, where \f$\sigma\f$ is larger than the lower
 * bound for the last category, then we raise this lower bound to
 * \f$\sigma\f$. Similarly, if we minimize in the last category, we can
 * lower the upper bound when we have enough generators beating the bound. In
 * the case where the figure of merit is to be *maximized in all* the
 * categories, then a generator is also discarded as soon as its figure of
 * merit in *any* dimension gets below the lower bound of the last category.
 *
 * The set of dimensions in which the test is applied can be partitioned into
 * a certain number of intervals, or categories, and one can use a different
 * selection criterion for the generators within each category. One can also
 * impose bounds on the figure of merit within each category: see the data
 * fields for `C`, `MinMerit` and `MaxMerit` below. For example, one can
 * consider only the generators with \f$M_8 \ge 0.6\f$, and, among these,
 * retain the list of generators with the smallest value of \f$M_{12}\f$.
 * As another example, one can retain the 2 generators with the highest
 * \f$M_8\f$, the 2 generators with the highest \f$M_{16}\f$ and the eight
 * generators with the highest \f$M_{32}\f$.
 *
 * The execution (CPU) time is checked before testing each new generator.
 * When it exceeds the CPU time limit given in the data file, the search is
 * aborted and the partial results are printed.
 *
 * \subsection executable_seek The executable programs
 *
 * Three different executable programs are compiled by the `makefile` from
 * `SeekMain`. Each of those executable uses a different types combination :
 * - `SeekLLDD` uses the standard C++ `int64_t` and `double` to represent every
 *   number needed by the program. This is the recommended parameter for small
 *   applications/testing implementations as it is the fastest one.
 * - `SeekZZDD` uses `NTL::ZZ` to represent integers in the basis of the
 *   lattices, but uses `double` to represent and make computation of vector
 *   length/figures of merit. This parameter is best used when doing `real
 *   scale` applications, when searching for 64-bit MRGs for example.
 * - `SeekZZRR` uses both `NTL::ZZ` for integers and `NTL::RR` for floating
 *   point numbers. This is only usefull when testing a small set of generators
 *   or when testing generators with an absurdly big modulo (which could happen
 *   when testing MWC generators for example).
 * The LatticeTester module `Types` includes a comprehensive guide on how to
 * choose the types depending on the use case.
 *
 * \subsection data_seek The data file
 *
 * \anchor input_format_seek
 *
 *      Criterion [Normalizer]
 *      ReadGenFile [GenFile]
 *      J
 *      GenType                             // This section has to appear J times
 *      m                                   //
 *      k                                   //
 *      PerMax                              //
 *      F1 [filem]                          //
 *      F2 [filer]                          //
 *      ImplementCond [s k[1] ... k[s]]     //
 *      b_1                                 //
 *      c_1                                 //
 *      .                                   //
 *      .                                   //
 *      .                                   //
 *      b_k                                 //
 *      c_k                                 //
 *      SearchMethod [n H H_k]              //
 *      C
 *      MinMerit[1], ..., MinMerit[C]
 *      MaxMerit[1], ..., MaxMerit[C]
 *      NbGen[1], ..., NbGen[C]
 *      d
 *      t[0], ..., t[d]
 *      WithDual
 *      Speed
 *      LatticeType
 *      LacGroupSize LacSpacing
 *      MaxNodesBB
 *      Duration Unit
 *      S
 *      OutputType
 * <center> **Data file format for `SeekMain`** </center>
 *
 * The data for `SeekMain` must be placed in a file with extension
 * `.dat`, according to the format displayed \ref input_format_seek "above". The
 * fields in square brackets are optional (depending on the value taken by the 
 * first field on the line). The meaning of all data fields is explained below. 
 * To run the program, type `./bin/SeekMain /path/to/file`, where 
 * `/path/to/file.dat` is the name of the data file containing the test to 
 * execute. The results will be printed either in a file `/path/to/file.res` or 
 * `path/to/file.gen` depending on `OutpoutType` (see below).
 *
 * The values of \f$m\f$, \f$b_i\f$, and \f$c_i\f$ in the data file can be
 * given in one of the two following formats:
 *
 * 1. An integer giving the value directly, in base 10. In this case, there
 * *must* be some other non-numeric text (e.g., a comment) on this data line
 * after the integer.
 * 2. Three integers \f$x\f$, \f$e\f$, and \f$z\f$ on the same line, separated
 * by at least one blank. The retained value will be \f$x^e+z\f$ if
 * \f$x\ge0\f$, and \f$-(|x|^e+z)\f$ if \f$x<0\f$. The value of \f$e\f$ must
 * be positive. For example, `[x e z] = [2 5 -1]` will give `31`, while `[x e z]
 * = [-2 5 -1]` will give `-31` (not `-33`).
 *
 * If the types chosen are LLDD, then the numbers used here must fit in a 
 * 64 bits integers. In the other cases, it won't matter.
 *
 * \subsection fields_seek Meaning of the data fields
 * 
 * We explain the meaning of all the fields of the data file. For every line,
 * of the data file, the options for the mandatory fields are listed between 
 * inequality signs as `<option1, option2, ...>` while the options for the 
 * optionnal/situationnal fields are listed in square brackets as `[option1, 
 * option2, ...]`.
 *
 * <dl>
 * <dt>Criterion Normalizer</dt> : <dd>`<Beyer, Spectral> 
 * [BestLat, Laminated, Rogers, Minkowski, MinkL1]` \n
 * Criterion specifies the merit criterion for ranking the generators for each
 * category.
 * If Criterion is `Spectral`, then *Normalizer* must appear and it
 * indicates which type of normalization is used in the definition of
 * \f$M_T\f$. The admissible values are
 *
 * <dl>
 * <dt>`Beyer`</dt>:
 * <dd>
 * means that the criterion is \f$Q_T\f$ (the Beyer quotient). The program will
 * retain the
 * generators with the largest (or smallest) \f$Q_T\f$ in each category. In
 * that case, the *Normalizer* field may be blank and is unread.
 * </dd>
 * <dt>`Spectral`</dt>:
 * <dd>
 * means that the criterion is \f$M_T\f$ (the Spectral test). The program will retain the
 * generators with the largest values (or smallest) \f$M_T\f$ in each
 * category. In that case, the *Normalizer* field must appear.
 * </dd>
 * </dl>
 * 
 * <dl>
 * <dt>`BestLat`:</dt>
 * <dd>
 * means that we use for \f$d_t^*\f$ the value of \f$d_t\f$ that corresponds
 * to the best lattice in dimension \f$t\f$. Only values for
 * \f$t\le48\f$ are known.
 * 
 * This is the recommended parameter.
 * </dd>
 * <dt>`Laminated`:</dt>
 * <dd>
 * means that we use for \f$d_t^*\f$ the value of \f$d_t\f$ that corresponds
 * to the best laminated lattice in dimension \f$t\f$. Only values for
 * \f$t\le48\f$ are known.
 * </dd>
 * <dt>`Rogers`:</dt>
 * <dd>
 * means that \f$d_t^*\f$ is obtained from Rogers’ bound.
 * </dd>
 * <dt>`Minkowski`:</dt>
 * <dd>
 * means that we use for \f$d_t^*\f$ Minkowski’s theoretical bounds on the
 * length of the shortest nonzero vector in a lattice. Only values for
 * \f$t\le48\f$ have been precomputed.
 * </dd>
 * <dt>`MinkL1`:</dt>
 * <dd>
 * means that length of vectors is computed using the
 * \f${\mathcal{L}}_1\f$ norm. Here, the length of the shortest nonzero
 * vector gives the minimal number of hyperplanes that cover all the points
 * of the lattice. Only values for \f$t\le48\f$ have been precomputed.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt>ReadGenFile Genfile</dt>:
 * <dd>`<true, false> [filename]` \n
 * `boolean` and file name (without extension). When *ReadGenFile* is
 * `false`, the search is made according to the values of the fields
 * below. When it is `true`, the generators to be looked at are those
 * listed in the file `filename.gen`. This must be a file of
 * type <tt>.gen</tt>, produced by this program with the <tt>GEN</tt>
 * option for the `OutputType` data field. In that case, only those
 * generators listed in that file are examined and the vectors \f$b\f$ and
 * \f$c\f$ below are not used.
 * </dd>
 *
 * <dt>J:</dt>
 * <dd>
 * `<int>`\n
 * Number of components of the generator. Must be an integer \f$J >
 * 0\f$. When \f$J = 1\f$ we look for a single generator, and when \f$J > 1\f$,
 * we look for combined generators.
 * </dd>
 *
 * <dt>`GenType`:</dt>
 * <dd>
 * `<MRG, KOROBOV, RANK1>`\n
 * The type of generator to build for this component.
 * <dl><dt><tt>MRG</tt>:</dt>
 * <dd>
 * means that this component is an MRG.
 * </dd>
 * <dt><tt>KOROBOV</tt>:</dt>
 * <dd>
 * means that this component is a Korobov lattice.
 * </dd>
 * <dt><tt>RANK1</tt>:</dt>
 * <dd>
 * means that this component is a rank 1 lattice.
 * </dd>
 * </dl>
 * </dd>
 * 
 * <dt>m:</dt>
 * <dd>
 * `<int>`\n
 * Modulus of the recurrence for this component. Must be positive a integer. If `m >= 2^64`
 * `SeekZZDD` or `SeekZZRR` have to be used.
 * </dd>
*
 * <dt>k:</dt>
 * <dd>
 * `<k>`\n
 * Order of the recurrence for this component. Must be a positive integer. Must
 * be odd if the generator has to have a full period. For \f$m^k
 * >= 2^{50}\f$, use the program <tt>SeekZZDD</tt> instead of
 * <tt>seekLLDD</tt>.
 * </dd>
 *
 * <dt>Permax:</dt>
 * <dd>
 * `<true, false>`\n
 * <tt>boolean</tt> variable. `true` if maximal period is required,
 * `false` otherwise. When set to `true`, \f$m\f$ must be
 * expressed in the data file in the form 1: `[x e z]`, otherwise
 * *Permax* will be put back to `false`. The software assumes that
 * \f$m\f$ is prime, unless \f$z=0\f$ and \f$e > 1\f$, in which case it
 * assumes that \f$x\f$ is prime. In the latter case, one must have
 * \f$k=1\f$, otherwise *Permax* will be set back to `false`.
 * </dd>
 *
 * <dt>F1 filem:</dt>
 * <dd>
 * `<Decomp, Write, Read> [filename]`\n
 * This line of data (and also the following one) is used only if maximal
 * period is required and `m` is assumed to be prime (see the `Permax`
 * field). Otherwise, the program just skips it (but the line must be there).
 * `F1` indicates how the factors of `m-1` are to be found and
 * `filename` is a file name without extension.
 *
 * <dl><dt><tt>Decomp</tt>:</dt>
 * <dd>
 * means that the program itself will factorize `m-1`. In this case, the
 * field `filem` is not used and can be omitted. Make sure that the `yafu`
 * executable has been included when compiling if using this option. The
 * factorization is done with no CPU time limit: it is the responsibility of the
 * user to make sure that the factorization will take a reasonable amount of time.
 * </dd>
 * <dt><tt>Write</tt>:</dt>
 * <dd>
 * means the same as <tt>Decomp</tt>, except that the program will also write
 * the prime factors found in a file called `filename.fac`, one factor per line,
 * with its multiplicity.
 * </dd>
 * <dt><tt>Read</tt>:</dt>
 * <dd>
 * indicates that `m-1` is already factorized and that the factors will
 * be read from file `filename`, in the same format. The factors need
 * not be sorted, but must be one per line, each with its multiplicity, as
 * described in method <tt>read</tt> of class <tt>IntFactorization</tt>. The
 * factorization must be complete and the program will check if the product
 * of all the factors is really equal to `m-1`.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt>F2 filer:</dt>
 * <dd>
 * `<Decomp, Write, Read, Prime> [filename]`\n
 * This data line is similar to the previous one, except that it concerns
 * `r=(m^k-1)/(m-1)` instead of `m-1`. In this case, it is possible
 * that `r` be prime when `m` is prime (in contrast to `m-1` which is even in
 * that case). Therefore, the additional value <tt>Prime</tt> is
 * allowed for `F2`. 
 *
 * <dl><dt><tt>Prime</tt>:</dt>
 * <dd>
 * indicates that `r` is prime. Some piece of software must have been used
 * independently to verify that `r` is indeed prime when using this option.
 * </dd>
 * </dl>
 * </dd>
 * 
 * <dt>ImplemCond \f$s\f$ \f$k_1\f$ \f$k_2\f$ …\f$k_s\f$:</dt>
 * <dd>
 * `<NoCond, AppFact, PowerTwo, NonZero, Equal> [s k[1] ... k[s]]`\n
 * Imposes different restrictions on the multipliers \f$a_i\f$.
 *
 * <dl><dt><tt>NoCond</tt>:</dt>
 * <dd>
 * no condition is imposed on the multipliers \f$a_i\f$.
 * </dd>
 * <dt><tt>AppFact</tt>:</dt>
 * <dd>
 * the multipliers must satisfy the condition \f$|a_i| (m\mod|a_i|) < m\f$,
 * called "approximate factoring", for each \f$i\f$. MRGs are often easier to
 * implement under this condition \cite rLEC90a&thinsp;.
 * </dd>
 * <dt><tt>PowerTwo</tt> \f$s\f$ \f${k_1}\f$:</dt>
 * <dd>
 * the positive integers *s = NumPow2* and <em>\f$k_1\f$ = HighestBit</em>
 * must appear and they indicate that for each \f$i\f$, the multiplier
 * \f$a_i\f$ must be the sum of at most *s* (positive or negative) powers of
 * 2, with the highest power of 2 not exceeding \f$2^{k_1}\f$ in absolute
 * value. For example, if *s* = 2 and <em>\f$k_1\f$</em> = 30, there are
 * \f$30 \times31 /2\f$ possibilities for choosing the 2 powers of 2 and 4
 * possibilities for choosing their signs, yielding 1860 cases where
 * \f$a_i\f$ is obtained from exactly 2 powers of 2. If one adds the \f$62\f$
 * cases where \f$a_i\f$ is \f$\pm\f$ a power of 2, this gives a total of
 * 1922 possibilities for \f$a_i\f$. In the case of <tt>PowerTwo</tt>, the
 * bounds \f$b_j\f$ and \f$c_j\f$ on the multipliers (see below) are
 * automatically reset to \f$b_j = -(2^{e+1}-1)\f$ and \f$c_j = 2^{e+1}-1\f$.
 * </dd>
 * <dt><tt>NonZero</tt> \f$s\f$ \f${k_1}\f$ \f${k_2}\f$
 * \f$\cdots\f$ \f${k_s}\f$:</dt>
 * <dd>
 * (note: \f${k_s}\f$ must be equal to \f$k\f$) all the multipliers will be
 * equal to 0, except for \f$s\f$ of them: the \f$s\f$ non-zero multipliers
 * are \f$a_{k_1}\f$, \f$a_{k_2}\f$, …, \f$a_{k_s}\f$. For example, for a MRG
 * of order \f$k=10\f$, the line <tt>"NonZero 4 2 5 8 10"</tt> will consider
 * only vector of multipliers of the form \f$\mathbf{a} = (0, \alpha, 0, 0,
 * \beta, 0, 0, \gamma, 0, \delta)\f$ where
 * \f$\alpha, \beta, \gamma, \delta\f$ are arbitrary integers in their
 * respective interval \f$[b_i, c_i]\f$. (\f$\mathbf{a_0}\f$ is unused). In
 * that case, only \f$s\f$ pairs \f$[b_i, c_i]\f$ must appear in the lines
 * for \f$[b_i, c_i]\f$ below.
 * </dd>
 * <dt><tt>Equal</tt> \f$s\f$ \f${k_1}\f$ \f${k_2}\f$
 * \f$\cdots\f$ \f${k_s}\f$:</dt>
 * <dd>
 * (note: \f${k_s}\f$ must be equal to \f$k\f$) all the multipliers must be
 * equal by groups. There are \f$s\f$ groups: the first group of \f$k_1\f$
 * multipliers are all equal, the second group of \f$k_2 - k_1\f$ multipliers
 * are all equal, and so on until the last group of \f$(k - k_{s-1})\f$
 * multipliers which are all equal. \f$k_j\f$ is the vector index of the last
 * element of group \f$j\f$. For example, for a MRG of order \f$k=10\f$, the
 * line <tt>"Equal 4 2 5 8 10"</tt> will consider only vector of multipliers
 * of the form \f$\mathbf{a} =
 * (\alpha, \alpha, \beta, \beta, \beta, \gamma, \gamma, \gamma, \delta, \delta)\f$ where
 * \f$\alpha, \beta, \gamma, \delta\f$ are arbitrary integers in their
 * respective interval \f$[b_i, c_i]\f$. (\f$\mathbf{a_0}\f$ is unused).
 * Elements \f$a_3 = a_4 =a_5\f$ are the elements of the second group. In
 * that case, only \f$s\f$ pairs \f$[b_i, c_i]\f$ must appear in the lines
 * for \f$[b_i, c_i]\f$ below.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt>`b_i`:</dt>
 * <dd>
 * `<int>`\n
 * The \f$b_i\f$ are integers such that \f$-m < b_i \le c_i <
 * m\f$ for \f$i=1,…,k\f$. They determine the boundary of the (rectangular)
 * area of search. This field goes along with the next one.
 * </dd>
 *
 * <dt>`c_i`:</dt>
 * <dd>
 * `int`\n
 * The \f$c_i\f$ are integers such that \f$-m < b_i \le c_i <
 * m\f$ for \f$i=1,…,k\f$. They determine the boundary of the (rectangular)
 * area of search.
 * </dd>
 *
 * <dt>SearchMethod \f$n,H,H_k\f$:</dt>
 * <dd>
 * `<Exhaust, Random> [n H Hk]`\n
 * <dl><dt><tt>Exhaust</tt>:</dt>
 * <dd>
 * means that the search will be exhaustive over the whole region determined
 * by \f$b\f$ and \f$c\f$. The other parameters of this line are then unused
 * and can be omitted.
 * </dd>
 * <dt><tt>Random</tt>:</dt>
 * <dd>
 * asks for a random search. The integer \f$n\f$ gives the number
 * of subregions (clusters) to examine. \f$H\f$ determines the size of these
 * subregions, except for the \f$k\f$th element of the vector \f$h\f$, where
 * \f$H_k\f$ determines the size. The vector \f$h=(h_1,…,h_k)\f$ is computed
 * by the program as follows: \f$h_i = \min(H, c_i-b_i+1), i=1,…,k-1\f$, and
 * \f$h_k = \min(H_k, c_k-b_k+1)\f$. The random search is then executed as
 * specified above.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt>`C`:</dt>
 * <dd>
 * `<int>`\n
 * The program will retain `C >= 1` lists (or categories) of generators,
 * according to the specifications given below.
 * </dd>
 *
 * </dd>
 * <dt>`MinMerit[1] ... MinMerit[C]`:</dt>
 * <dd>`<double ... double>`</dd>
 * <dt>`MaxMerit[1] ... MaxMerit[C]`:</dt>
 * <dd>
 * `<double ... double>`
 *
 * Real numbers that must satisfy `0.0 <= MinMerit[i] <= MaxMerit[i] <= 1.0`
 * for each `i`, and `MinMerit[i] <= MaxMerit[i-1]` for `i > 1`. They represent
 * the minimal and maximal values of the figure of merit `sigma` (specified by
 * `Criterion` above and `d` and `t[0], ..., t[d]` below) to keep a generator for
 * each category. That is, only the generators that satisfy 
 * `MinMerit[i] <= sigma <= MaxMerit[i]` are considered for the category `i` and
 * the categories above it. Note that because of this, the values of
 * `MinMerit[i]` should always be nondecreasing in `i`, because the lower bounds for
 * all the previous categories also apply to any given category. As soon as a
 * generator does not satisfy this criterion in a given dimension delimiting
 * a category, it is discarded and no more time is spent to test it. When
 * looking for good generators, one normally sets `MaxMerit[i]` to 1.0
 * for each `i`.

 * \remark These parameters is currently broken and `C` should be kept at 1.
 * **Marc-Antoine**: selon l'implémentation
 * actuelle, c'est brisé. Présentement, le programme ne permet pas non plus de
 * chercher des générateurs avec de mauvaises figures de mérite. Chaque intervalle
 * devrait correspondre à un critère différent.
 * </dd>
 *
 * <dt>`NbGen[1] ... NbGen[C]`:</dt>
 * <dd>
 * `<int ... int>`\n
 * Each `NbGen[i]` must be an integer `>= 0`. If positive:
 * maximum number of generators to retain in the results for category
 * `i`. The value 0 means that no list of generators is retained for that
 * category.
 * </dd>
 *
 * <dt>`d`:</dt>
 * <dd>
 * `<int>`\n
 * An integer `> 0` indicating what projections to test. If `d = 1`, only
 * projections of successive coordinates in dimensions from `td[0]` to `td[1]`
 * are tested. If `d > 1` then all dimensions from `td[0]` to `td[1]` are tested
 * with successive coordinates, then all i dimensional projection are tested 
 * with coordinates between `td[0]` and `td[i]` up to `d` dimensional 
 * projections.
 * </dd>
 *
 * <dt>`t[0] ... t[d]`:</dt>
 * <dd>
 * `<int ... int>`\n
 * The projections used to compute the figure of merit in dimension `1 <= l <= d`
 * are all the subsets of dimension `l` of indices between `t[0]` and `t[l]`.
 * </dd>
 *
 * <dt>`WithDual`:</dt>
 * <dd>
 * `<true, false>`\n
 * If `true` the test is done for the dual lattice; otherwise for the
 * primal lattice.
 * </dd>
 * 
 * <dt>`Speed`:</dt>
 * <dd>
 * `<0, 1, 2>`\n
 * This data field currently is only used in the case of the spectral test,
 * only if `d == 1`. It specifies if the spectral test
 * should be accelerated by not doing the Branch-and-Bound algorithm. This can
 * be usefull when doing a large scale search: the program will still be able to
 * retain certain generators, with slightly worse figures of merit than their
 * real values. After the search is done and generators have been retained, they
 * can be tested more extensively by using the setting `0`.
 * 
 * <dl>
 * <dt>0:</dt>
 * <dd>
 * When this option is selected, the program executes normally.
 * </dd>
 * <dt>1:</dt>
 * <dd>
 * When this option is selected, the figures of merit will only be computed with
 * BKZ pre-reduction. The Branch-and-Bound will not be executed. The figures of
 * merit will no longer be exact, but this can speed up the computations by a lot.
 * </dd>
 * <dt>2:</dt>
 * <dd>
 * This does the same as the previous option but uses LLL pre-reduction instead
 * of BKZ pre-reduction.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt>`LatticeType`:</dt>
 * <dd>
 * `<Full, Recurrent, Orbit, PrimePower>`\n
 * Indicates whether to analyze the lattice generated by all possible states,
 * or a sublattice generated by the set of recurrent states or by a subcycle
 * of the generator.
 *
 * \todo Most of those settings are not implemented. It is safer to stick to
 * `Full` for now, but this also means that the lattice of generators without
 * full period cannot be examined correctly.
 *
 * <dl><dt><tt>Full</tt>:</dt>
 * <dd>
 * The complete lattice, generated by all possible initial states, will be
 * analyzed.
 * </dd>
 * <dt><tt>Recurrent</tt>:</dt>
 * <dd>
 * If the (combined) generator has transient states, then the lattice
 * analyzed will be the sublattice generated by the set of recurrent states.
 * </dd>
 * <dt><tt>Orbit</tt>:</dt>
 * <dd>
 * The grid generated by the (forward) orbit of a state of the (combined)
 * generator is analyzed. This state is specified as follows. On the
 * following \f$J\f$ lines, the initial state for each component must be
 * given. This is an integer vector with a number of components equal to the
 * order of the component.
 * </dd>
 * <dt><tt>PrimePower</tt>:</dt>
 * <dd>
 * In the case where some component is an MLCG whose modulus is a power of a
 * prime \f$p\f$, then the states visited over a single orbit (subcycle) of
 * that component generate a sublattice (when \f$a \equiv1 \bmod p\f$) or
 * belong to the union of \f$p-1\f$ sublattices (otherwise). If *LatticeType*
 * takes this value, if a component is an MLCG (\f$k=1\f$), and if the
 * modulus of that MLCG is given in the data file in the form (b): \f$(x e
 * z)\f$ with \f$z=0\f$ and \f$x\f$ prime, then what is analyzed is one of
 * those sublattices. This is done by dividing the modulus by the appropriate
 * power of \f$p\f$, as described in \cite rLEC94e&thinsp;. For example, if
 * \f$p=2\f$ and \f$a \mod8 = 5\f$, then the modulus is divided by 4 as in
 * \cite rFIS90a, \cite rKNU81a&thinsp;.
 * </dd>
 * </dl>
 * </dd>
 *
 * <dt>`LacGroupSize LacSpacing`:</dt>
 * <dd>
 * `<int> <int>`\n
 * These data fields are positive integers, used to introduce lacunary
 * indices. If the respective values are \f$s\f$ and \f$d\f$, then we will
 * analyze the lattice structure of vectors of the form \f$(u_{i+1}, …,
 * u_{i+s}, u_{i+d+1},…, u_{i+d+s}, u_{i+2d+1},…, u_{i+2d+s}, …)\f$, formed
 * by groups of \f$s\f$ successive values, taken \f$d\f$ values apart. To
 * analyze vectors of successive values (as usual), take \f$s=d=1\f$. or
 * \f$s\f$ larger or equal to *MaxDim*. To analyze lacunary indices that are
 * not evenly spaced, put \f$s = -t\f$ where <em>\f$t=\f$MaxDim</em> and
 * then, on the \f$t\f$ lines that follow, give the \f$t\f$ lacunary indices
 * \f$i_1,…,i_t\f$. .
 * </dd>
 * 
 * <dt>`MaxNodesBB`:</dt>
 * <dd>
 * `<int>`\n
 * An integer giving the maximum number of nodes to be examined in any given
 * branch-and-bound procedure when computing \f$d_t\f$ or \f$q_t\f$. When
 * that value is exceeded, the branch-and-bound is stopped and the generator
 * is rejected. The number of generators rejected for that reason is given in
 * the results. A smaller value of `MaxNodesBB` will make the program run
 * faster (sometimes much faster), permitting to examine more generators, but
 * will increase the chances of rejecting good generators.
 * </dd>
 *
 * <dt>`Duration Unit`:</dt>
 * <dd>
 * `<double> <s, m, h, d>`\n
 * A real number followed by a letter, giving the maximal CPU time given to
 * the program for performing its search. The `unit` must be one of
 * <em>s, m, h, *or* d</em> for seconds, minutes, hours, and days,
 * respectively. When the CPU time exceeds this duration, the partial results
 * are printed, with a message. For a random search, the number of subregions
 * printed includes the last region searched (whose search may not be
 * finished).
 * </dd>
 *
 * <dt>`S`:</dt>
 * <dd>
 * `<int>`\n
 * Seed of the generator used for the random search. To perform a different
 * random search in a region already studied, just change the seed. One must
 * have \f$S> 0\f$.
 * </dd>
 *
 * <dt>`OutputType`:</dt>
 * <dd>
 * `<Terminal, RES, GEN>`\n
 * Selects in which form the results will be given. Lowercases are also allowed.
 *
 * <dl><dt><tt>Terminal</tt>:</dt>
 * <dd>
 * indicates that the results will appear only on the terminal screen.
 * </dd>
 * <dt><tt>RES</tt>:</dt>
 * <dd>
 * says that the results will be in a file with the same name as the data
 * file, but with extension <tt>".res"</tt>.
 * </dd>
 * <dt><tt>GEN</tt>:</dt>
 * <dd>
 * says that the retained generators will be listed in a file with the same
 * name as the data file, with extension <tt>".gen"</tt>. This file can then
 * be taken as input to the same program, for example to perform a second
 * pass with a more stringent criterion or to compute higher dimensional
 * lattice "measures" for the retained generators.
 * </dd>
 * </dl>
 * </dd>
 * </dl>
 * 
 * \subsection output_seek The output files
 * A section describing how to read the output files.
 * */

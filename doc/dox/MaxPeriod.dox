/**
 * \page MaxPeriod MaxPeriod
 *
 * This module contains a program to determine whether a given
 * MRG has maximal period or not. The MRG generator has the form
 * \f[
 *   x_n = (a_1 x_{n-1} + \cdots+ a_k x_{n-k}) \mbox{ mod } m.
 * \f]
 * The modulus \f$m\f$ must be a prime number. To verify the conditions for
 * maximal period, the factorizations of \f$m-1\f$ and \f$r =
 * (m^k-1)/(m-1)\f$ are required. They can be found by the program or
 * provided by the user in a file. The user must be aware that factoring
 * \f$r\f$ can take a *huge* amount of time for large integers. Integers are
 * represented using the `ZZ` type from NTL.
 *
 * The program is called `MaxPeriod` and reads the parameters of the generator
 * from a file. The data file must have the extension
 * \anchor REF__MaxPeriod_ref_maxper `.dat`. To run the program, the name of
 * the data file must be given without extension on the command line. For
 * example, if the data file is called `maxp1.dat`, then the program is run
 * by calling
 *
 *  `MaxPeriod <I, Z> maxp1`
 *
 * and the results will be written in file `maxp1.res`.
 *
 * The data file must have the following format:
 *
 *      GenType
 *      m
 *      k
 *      decom1 [file1]
 *      decom2 [file2]
 *      a_1
 *      ...
 *      a_k
 *
 * <center>
 * **Data file format for `MaxPeriod`**
 * </center>
 *
 *  The file must contain the following parameters in that order:
 *
 * <dl><dt>`GenType`:</dt>
 * <dd>
 * This has to be `MRG`.
 * </dd>
 * <dt>`m`:</dt>
 * <dd>
 * `<int>` the modulus of congruence of the MRG.
 * </dd>
 * <dt>`k`:</dt>
 * <dd>
 * `<int>` the order of the MRG.
 * </dd>
 * <dt>`decom1 [file1]`:</dt>
 * <dd>
 * `<DecompType> <string>` `file1` is needed depending on the value of `decom1`.
 * This parameters specifies how the program will get the decomposition of `m-1`.
 * <dl><dt>`Decomp`:</dt>
 * <dd>
 * the program will factorize \f$m-1\f$. In this case, the field
 * `file1` is unused and can be omitted. To factorize, the program uses `yafu`.
 * It is the responsibility of the user to make sure that the factorization will
 * take a reasonable time and that `yafu` is installed as specified in the
 * installation instructions.
 * </dd>
 * <dt>`Write`:</dt>
 * <dd>
 * means the same as `Decomp`, except that the program will also write
 * the prime factors found in a file with name `file1.fac`.
 * </dd>
 * <dt>`Read`:</dt>
 * <dd>
 * \f$m-1\f$ is already factorized and the factors will be read from file
 * `file1.fac`. The prime factors must be given as described in class
 * LatMRG::IntFactorization.
 * </dd>
 * <dt>`Prime`:</dt>
 * <dd>
 * the number is a prime number. Note that this is not possible for decom1.
 * </dd>
 * </dl>
 * </dd>
 * <dt>`decom2 [file2]`:</dt>
 * <dd>
 * `<DecompType> <string>` `file1` is needed depending on the value of `decom1`.
 * This parameters specifies how the program will get the decomposition of `r`.
 * The argument `decom2` can take the values specified above for `decom1`.
 * </dd>
 * <dt>`a_1, ..., a_k`:</dt>
 * <dd>
 * `<int>` the coefficients of the MRG that must each be given on a separate line.
 * </dd>
 * </dl>
 * */
